bst = BVS
avltree = AVL strom
btree = B strom
redblack = \u010cerveno-\u010dierny strom
aatree = AA strom
skiplist = Skiplist
maxheap = Max Halda
minheap = Min Halda
treap = Treap
scapegoat = GB strom
splaytree = Splay strom

display = Display
control = Ovl\u00e1danie
text = Text
next = \u010ealej
clear = Zma\u017e
random = N\u00e1hodn\u00e9
pause = Pauzy
small = Men\u0161ie
insert = Vlo\u017e
find = H\u013eadaj
delete = Odstr\u00e1\u0148
insertion = Vkladanie
search = H\u013eadanie
deletion = Odstra\u0148ovanie
splay = Splay-ovanie

size = Ve\u013ekos\u0165
height = V\u00fd\u0161ka
opt = opt
avedepth = Priem. h\u013abka
nodes = Vrcholov
keys = K\u013e\u00fa\u010dov
full = pln\u00e9
excess = Vrcholov navy\u0161e
deleted = Vymazan\u00fdch
emptyheap = pr\u00e1zdna halda
fullheap = pln\u00e1

done = A je to.
empty = Strom je pr\u00e1zdny.
alreadythere = Dan\u00fd k\u013e\u00fa\u010d sa u\u017e nach\u00e1dza v strome.
found = N\u00e1jden\u00e9.
notfound = Nen\u00e1jden\u00e9.
newroot = Ke\u010f\u017ee je strom pr\u00e1zdny, vytvor\u00edme nov\u00fd kore\u0148.

bstinsertstart = Za\u010dneme v koreni.
bstinsertleft = Ke\u010f\u017ee #1 &lt; #2, vklad\u00e1me do \u013eav\u00e9ho podstromu.
bstinsertright = Ke\u010f\u017ee #1 &gt; #2, vklad\u00e1me do prav\u00e9ho podstromu.
bstfindstart = Za\u010dneme h\u013eada\u0165 v koreni.
bstfindleft = Ke\u010f\u017ee #1 &lt; #2, h\u013ead\u00e1me v \u013eavom podstrome.
bstfindright = Ke\u010f\u017ee #1 &gt; #2, h\u013ead\u00e1me v pravom podstrome.
bstdeletestart = Najsk\u00f4r mus\u00edme n\u00e1js\u0165 vrchol s dan\u00fdm k\u013e\u00fa\u010dom.
bstdeletecase1 = Pr\u00edpad I: Vrchol je list; m\u00f4\u017eeme ho jednoducho odstr\u00e1ni\u0165.
bstdeletecase2 = Pr\u00edpad II: Vrchol m\u00e1 jedn\u00e9ho syna; tohto syna pripoj\u00edme na jeho star\u00e9ho otca, potom m\u00f4\u017eeme dan\u00fd vrchol jednoducho odstr\u00e1ni\u0165.
bstdeletecase3 = Pr\u00edpad III: Vrhol m\u00e1 oboch synov; n\u00e1jdeme jeho nasledovn\u00edka, ktor\u00fd ho nahrad\u00ed. (Nasledovn\u00edk je naj\u013eavej\u0161\u00ed vrchol v pravom podstrome - tento m\u00e1 najviac jedn\u00e9ho syna (prav\u00e9ho) a teda vieme ho jednoducho odstr\u00e1ni\u0165 - pr\u00edpad I alebo II.)

avlinsertbal = Pr\u00e1ve sme vlo\u017eili nov\u00fd vrchol; vraciame sa sp\u00e4\u0165 ku kore\u0148u a upravujeme inform\u00e1cie o vyv\u00e1\u017eenosti.
avldeletebal = Pr\u00e1ve sme vymazali vrchol; vraciame sa sp\u00e4\u0165 ku kore\u0148u a upravujeme inform\u00e1cie o vyv\u00e1\u017eenosti.
avlupdatebal = Uprav\u00edme inform\u00e1ciu o vyv\u00e1\u017eenosti.
avll = Prav\u00fd podstrom je pr\u00edli\u0161 vysok\u00fd: rotujeme do\u013eava.
avlr = \u013dav\u00fd podstrom je pr\u00edli\u0161 vysok\u00fd: rotujeme doprava.
avllr = Prav\u00fd podstrom je pr\u00edli\u0161 vysok\u00fd, ale jeho \u013eav\u00fd podstrom je vy\u0161\u0161\u00ed ako prav\u00fd: rotujeme najsk\u00f4r do\u013eava, potom doprava.
avlrl = \u013dav\u00fd podstrom je pr\u00edli\u0161 vysok\u00fd, ale jeho prav\u00fd podstrom je vy\u0161\u0161\u00ed ako \u013eav\u00fd: rotujeme najsk\u00f4r doprava, potom do\u013eava.

bfind0 = #1 &lt; #2, ideme po 1. hrane.
bfind = #1 &lt; #2 &lt; #3, ideme po #4. hrane.
bfindn = #1 &lt; #2, ideme po #3. hrane.
binsertleaf = K\u013e\u00fa\u010d vlo\u017e\u00edme do tohto vrcholu.
bsplit = Vrchol je pr\u00edli\u017e ve\u013ek\u00fd, mus\u00edme ho rozdeli\u0165.
bdelete1 = Pr\u00edpad I: K\u013e\u00fa\u010d je v liste, m\u00f4\u017eeme ho odstr\u00e1ni\u0165.
bdelete2 = Pr\u00edpad II: K\u013e\u00fa\u010d je v internom vrchole; nahrad\u00edme ho jeho nasledovn\u00edkom.
bleft = Pr\u00edpad I: Vrchol je pr\u00edli\u017e mal\u00fd, ale jeho \u013eav\u00fd brat je dos\u0165 ve\u013ek\u00fd, tak\u017ee si od neho m\u00f4\u017eeme jeden k\u013e\u00fa\u010d zobra\u0165.
bright = Pr\u00edpad II: Vrchol je pr\u00edli\u017e mal\u00fd, ale jeho prav\u00fd brat je dos\u0165 ve\u013ek\u00fd, tak\u017ee si od neho m\u00f4\u017eeme jeden k\u013e\u00fa\u010d zobra\u0165.
bmerge = Pr\u00edpad III: Vrchol aj jeho bratia s\u00fa pr\u00edli\u017e mal\u00ed, tak\u017ee ich spoj\u00edme.

rbinsertcase1 = Pr\u00edpad I, \u010derven\u00fd str\u00fdko: Prefarb\u00edme otca a str\u00fdka na \u010dierno, star\u00e9ho otca na \u010derveno a pokra\u010dujeme star\u00fdm otcom.
rbinsertcase2 = Pr\u00edpad II, \u010dierny str\u00fdko, "vn\u00fatorn\u00fd vrchol": prevedieme na pr\u00edpad III.
rbinsertcase3 = Pr\u00edpad III, \u010dierny str\u00fdko, "vonkaj\u0161\u00ed vrchol": Zrotujeme a prefarb\u00edme vrcholy.
rbdelete1 = Pr\u00edpad I: \u010derven\u00fd s\u00farodenec: Vymen\u00edme farby otca a prav\u00e9ho s\u00farodenca a zrotujeme s\u00farodenca; dostaneme tak pr\u00edpad II, III, alebo IV.
rbdelete2 = Pr\u00edpad II, s\u00farodenec a obe jeho deti s\u00fa \u010dierne: the extra black is moved up the tree.
rbdelete3 = Pr\u00edpad III, s\u00farodenec a jeho "vonkaj\u0161\u00ed" syn s\u00fa \u010dierni, jeho "vn\u00fatorn\u00fd" syn je \u010derven\u00fd: Prevedieme na pr\u00edpad IV.
rbdelete4 = Pr\u00edpad IV, s\u00farodenec a jeho "vn\u00fatorn\u00fd" syn s\u00fa \u010dierni, jeho "vonkaj\u0161\u00ed" syn je \u010derven\u00fd: Vymen\u00edme farby otca a s\u00farodenca, zrotujeme ho a jeho \u010derven\u00e9ho syna zafarb\u00edme na \u010dierno.

aaok = Tento vrchol je OK.
aaskew = Skew: \u013dav\u00fd podstrom m\u00e1 rovnak\u00fd rank; sprav\u00edme rot\u00e1ciu doprava.
aaskew2 = Skew2: \u013dav\u00fd podstrom m\u00e1 rovnak\u00fd rank; sprav\u00edme rot\u00e1ciu doprava.
aaskew3 = Skew3: \u013dav\u00fd podstrom m\u00e1 rovnak\u00fd rank; sprav\u00edme rot\u00e1ciu doprava.
aasplit = Split: Pseudovrchol (tvoren\u00fd susedn\u00fdmi vrcholmi s rovnak\u00fdm rankom) je pr\u00edli\u017e ve\u013ek\u00fd; sprav\u00edme rot\u00e1ciu v\u013eavo a zv\u00fd\u0161ime rank stredn\u00e9ho vrcholu.
aasplit2 = Split2: Pseudovrchol (tvoren\u00fd susedn\u00fdmi vrcholmi s rovnak\u00fdm rankom) je pr\u00edli\u017e ve\u013ek\u00fd; sprav\u00edme rot\u00e1ciu v\u013eavo a zv\u00fd\u0161ime rank stredn\u00e9ho vrcholu.

skipinsertstart = Za\u010dneme v \u013eavom hornom rohu a n\u00e1jdeme spr\u00e1vne miesto, kam vlo\u017ei\u0165 nov\u00fd vrchol.
skipinsertnext = Nasleduj\u00faci vrchol je men\u0161\u00ed ako n\u00e1\u0161. Vklad\u00e1me vpravo.
skipinsertafter = Nov\u00fd vrchol vlo\u017e\u00edme hne\u010f za tento.
skippromote = Hodili sme si mincou. Padla hlava, tak\u017ee prid\u00e1me \u010fal\u0161\u00ed vrchol.
skipend = Hodili sme si mincou. Padol znak, tak\u017ee kon\u010d\u00edme.
skipnext = Nasledovn\u00fd vrchol je men\u0161\u00ed ako n\u00e1\u0161. Ideme vpravo.
skipdown = Nasledovn\u00fd vrcrhol je v\u00e4\u010d\u0161\u00ed alebo rovn\u00fd n\u00e1\u0161mu. Ideme dolu.
skipfindstart = Za\u010dneme h\u013eada\u0165 v \u013eavom hornom rohu.
skipdelete = N\u00e1jden\u00fd vrchol vyma\u017eeme z ka\u017edej \u00farovne.

heapbubbleup = Prebubleme vrchol nahor (t.j. vymie\u0148ame s otcom, k\u00fdm nem\u00e1 otec v\u00e4\u010d\u0161iu prioritu).
heapbubbledown = Prebubleme vrchol nadol (vymie\u0148ame v\u017edy s v\u00e4\u010d\u0161\u00edm synom, k\u00fdm nemaj\u00fa obaja synovia men\u0161iu prioritu).

treapbubbleup = Bubleme vrchol nahor, k\u00fdm otec nem\u00e1 v\u00e4\u010d\u0161iu prioritu.
treapbubbledown = Bubleme vrchol nadol, k\u00fdm nemaj\u00fa deti men\u0161iu prioritu.
treapdeletecase1 = Teraz je vrchol list, tak\u017ee ho vieme jednoducho odstr\u00e1ni\u0165.

deletemax = Odstr\u00e1\u0148 maximum.
deletemin = Odstr\u00e1\u0148 minimum.
heapempty = Halda je pr\u00e1zdna.
heapfull = Halda je pln\u00e1.

gbinsertunmark = K\u013e\u00fa\u010d u\u017e je v strome, ale ozna\u010den\u00fd na vymazanie. Iba zru\u0161\u00edme zna\u010dku.
gbtoohigh = Tento podstrom je pr\u00edli\u0161 vysok\u00fd, cel\u00fd ho prebudujeme.
gbrebuild1 = F\u00e1za I: Transformujeme podstrom na "prav\u00fa re\u0165az" a odstra\u0148ujeme vrcholy ozna\u010den\u00e9 na vymazanie.
gbrebuild2 = F\u00e1za II: Re\u0165az transformujeme na dokonale vyv\u00e1\u017een\u00fd strom.
gbfinddeleted = Vrchol je ozna\u010den\u00fd na vymazanie. Nen\u00e1jden\u00e9.
gbdeletemark = Vrchol ozna\u010d\u00edme na vymazanie (naozaj ho odstr\u00e1nime a\u017e pri najbli\u017e\u0161om prebudovan\u00ed stromu).
gbdeletedeleted = Vrchol u\u017e je ozna\u010den\u00fd na vymazanie.
gbdeleterebuild = Polovica vrcholov u\u017e je ozna\u010den\u00e1 na vymazanie. Cel\u00fd strom prebudujeme.

splaystart = Najsk\u00f4r n\u00e1jdeme dan\u00fd k\u013e\u00fa\u010d, alebo najmen\u0161\u00ed v\u00e4\u010d\u0161\u00ed, alebo najv\u00e4\u010d\u0161\u00ed men\u0161\u00ed k\u013e\u00fa\u010d a vysplayujeme ho do kore\u0148a.
splayfound = Tento kore\u0148 budeme splayova\u0165.
splayroot = Vrchol nem\u00e1 star\u00e9ho otca; sprav\u00edme iba jednu rot\u00e1ciu.
splayzigzigleft = Pr\u00edpad "Cik-cik" (otec aj star\u00fd otec s\u00fa smerom vpravo): najsk\u00f4r zrotujeme otca, potom dan\u00fd vrchol.
splayzigzigright = Pr\u00edpad "Cik-cik" (otec aj star\u00fd otec s\u00fa smerom v\u013eavo): najsk\u00f4r zrotujeme otca, potom dan\u00fd vrchol.
splayzigzagleft = Pr\u00edpad "Cik-cak" (otec je smerom vpravo a star\u00fd otec smerom v\u013eavo): vrchol dvakr\u00e1t zrotujeme.
splayzigzagright = Pr\u00edpad "Cik-cak" (otec je smerom v\u013eavo a star\u00fd otec smerom vpravo): vrchol dvakr\u00e1t zrotujeme.
splayinroot = Teraz je n\u00e1\u0161 k\u013e\u00fa\u010d (alebo najv\u00e4\u010d\u0161\u00ed men\u0161\u00ed alebo najmen\u0161\u00ed v\u00e4\u010d\u0161\u00ed) v koreni.
splayinsertleft = Kore\u0148 a cel\u00fd \u013eav\u00fd podstrom je men\u0161\u00ed ako n\u00e1\u0161 k\u013e\u00fa\u010d a cel\u00fd prav\u00fd podstrom je v\u00e4\u010d\u0161\u00ed ako n\u00e1\u0161 k\u013e\u00fa\u010d: jednoducho vytvor\u00edme nov\u00fd kore\u0148 a pripoj\u00edme star\u00fd kore\u0148 v\u013eavo a jeho prav\u00fd podstrom vpravo.
splayinsertright = Kore\u0148 a cel\u00fd prav\u00fd podstrom je v\u00e4\u010d\u0161\u00ed ako n\u00e1\u0161 k\u013e\u00fa\u010d a cel\u00fd \u013eav\u00fd podstrom je men\u0161\u00ed ako n\u00e1\u0161 k\u013e\u00fa\u010d: jednoducho vytvor\u00edme nov\u00fd kore\u0148 a pripoj\u00edme star\u00fd kore\u0148 vpravo a jeho \u013eav\u00fd podstrom v\u013eavo.
splaydeleteleft = Kore\u0148 nem\u00e1 prav\u00e9ho syna; jednoducho ho odstr\u00e1nime a z \u013eav\u00e9ho syna sprav\u00edme nov\u00fd kore\u0148.
splaydeleteright = Kore\u0148 nem\u00e1 \u013eav\u00e9ho syna; jednoducho ho odstr\u00e1nime a z prav\u00e9ho syna sprav\u00edme nov\u00fd kore\u0148.
splaydelete = Odstr\u00e1nime kore\u0148 a vysplayujeme minimum prav\u00e9ho podstromu.
splaydeletelink = Minimum bude teraz nov\u00fd kore\u0148; ke\u010f\u017ee minimum nem\u00e1 \u013eav\u00e9ho syna, sta\u010d\u00ed prilinkova\u0165 \u013eav\u00fd podstrom k nov\u00e9mu kore\u0148u.
